#!/usr/bin/env python3
"""
OpenRouter Prompt Caching Test Script
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
"""
import os
import sys
import json
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.config import OpenRouterConfig
from src.modules.prompt_caching import PromptCachingTestModule
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()


def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
    load_dotenv()
    
    console.print(Panel.fit(
        "[bold cyan]üöÄ OpenRouter Prompt Caching Test Suite[/]\n\n"
        "[green]–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤[/]\n"
        "[blue]–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:[/] https://openrouter.ai/docs/features/prompt-caching\n"
        "[yellow]–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:[/] –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–µ—à-—Ç–æ–∫–µ–Ω–æ–≤",
        title="‚ö° Cache Testing",
        border_style="cyan"
    ))
    
    try:
        config = OpenRouterConfig.from_env()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        console.print(f"\n[bold]–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:[/]")
        console.print(f"  API Base URL: {config.base_url}")
        console.print(f"  Logs Directory: {config.logs_dir}")
        
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/]")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        import httpx
        http_client = httpx.Client(timeout=config.timeout)
    except ImportError:
        http_client = None
        console.print("[yellow]‚ö†Ô∏è httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ OpenAI client[/]")
    
    cache_module = PromptCachingTestModule(config, http_client)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tests_to_run = [
        ("cache_basic_test", "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"),
        ("cache_repeated_requests", "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã"),
        ("cache_system_message", "–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"),
        ("cache_token_analysis", "–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"),
        ("cache_historian_example", "–ü—Ä–∏–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∫–∞ (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)")
    ]
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_test = [
        "openai/gpt-4o-mini",
        "anthropic/claude-3-haiku",
        "openai/gpt-4o"
    ]
    
    results = {}
    
    for model in models_to_test:
        console.rule(f"[bold cyan]üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model}[/]")
        model_results = {}
        
        for test_name, test_description in tests_to_run:
            console.print(f"\n[bold]–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞:[/] {test_description}")
            
            try:
                result = cache_module.run_test(test_name, model)
                model_results[test_name] = result
                
                if result.is_success():
                    console.print(f"  ‚úÖ {test_description} - –£—Å–ø–µ—à–Ω–æ")
                    console.print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration:.2f}—Å")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏
                    if result.data and "cache_comparison" in result.data:
                        cache_info = result.data["cache_comparison"]
                        if cache_info.get("cache_info_found"):
                            console.print("  üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ!")
                        
                    if result.data and "cache_analysis" in result.data:
                        analysis = result.data["cache_analysis"]
                        cache_hits = analysis.get("cache_hits_detected", 0)
                        if cache_hits > 0:
                            console.print(f"  üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–µ—à-–ø–æ–ø–∞–¥–∞–Ω–∏–π: {cache_hits}")
                            
                    if result.data and "cache_efficiency" in result.data:
                        efficiency = result.data["cache_efficiency"]
                        hit_rate = efficiency.get("cache_hit_rate", 0)
                        if hit_rate > 0:
                            console.print(f"  üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–µ—à: {hit_rate:.2%}")
                        
                else:
                    console.print(f"  ‚ùå {test_description} - –û—à–∏–±–∫–∞: {result.error}")
                    
            except Exception as e:
                console.print(f"  üí• {test_description} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
                model_results[test_name] = {
                    "status": "error",
                    "error": str(e)
                }
        
        results[model] = model_results
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –º–æ–¥–µ–ª–∏
        successful_tests = sum(1 for r in model_results.values() if hasattr(r, 'is_success') and r.is_success())
        console.print(f"\n[bold]–ò—Ç–æ–≥–æ –ø–æ –º–æ–¥–µ–ª–∏ {model}:[/] {successful_tests}/{len(tests_to_run)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.rule("[bold green]üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é[/]")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    table = Table(title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤")
    table.add_column("–ú–æ–¥–µ–ª—å", style="cyan")
    table.add_column("–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç", justify="center")
    table.add_column("–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", justify="center")
    table.add_column("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", justify="center")
    table.add_column("–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤", justify="center")
    table.add_column("–ü—Ä–∏–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∫–∞", justify="center")
    
    for model, model_results in results.items():
        row = [model]
        for test_name, _ in tests_to_run:
            result = model_results.get(test_name)
            if hasattr(result, 'is_success'):
                icon = "‚úÖ" if result.is_success() else "‚ùå"
            else:
                icon = "üí•"
            row.append(icon)
        table.add_row(*row)
    
    console.print(table)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = Path("logs") / f"cache_test_report_{timestamp}.json"
    Path("logs").mkdir(exist_ok=True)
    
    report_data = {
        "timestamp": timestamp,
        "test_type": "prompt_caching",
        "models_tested": list(results.keys()),
        "tests_executed": [test_name for test_name, _ in tests_to_run],
        "results": {}
    }
    
    for model, model_results in results.items():
        report_data["results"][model] = {}
        for test_name, result in model_results.items():
            if hasattr(result, 'to_dict'):
                report_data["results"][model][test_name] = result.to_dict()
            else:
                report_data["results"][model][test_name] = result
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    console.print(f"\n[green]üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:[/] {report_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if hasattr(cache_module, 'cache_log_file'):
        console.print(f"[blue]üìã –õ–æ–≥–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:[/] {cache_module.cache_log_file}")
    
    console.print(f"\n[bold green]üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ![/]")
    console.print(f"[dim]–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–µ—à-—Ç–æ–∫–µ–Ω–æ–≤ –∏–∑—É—á–∏—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –≤—ã—à–µ.[/]")


if __name__ == "__main__":
    main()
