#!/usr/bin/env python3
"""
OpenRouter Real API Cache Test
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ OpenRouter API
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.config import OpenRouterConfig
from src.modules.prompt_caching import PromptCachingTestModule
from rich.console import Console
from rich.panel import Panel

console = Console()


def main():
    """–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenRouter API"""
    
    console.print(Panel.fit(
        "[bold red]üö® –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ô OpenRouter API[/]\n\n"
        "[yellow]–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:[/]\n"
        "[green]‚úì[/] –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á OpenRouter\n"
        "[green]‚úì[/] –í .env —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ROUTER_API_KEY\n"
        "[green]‚úì[/] ROUTER_BASE_URL=https://openrouter.ai/api/v1[/]\n\n"
        "[red]‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã![/]",
        title="‚ö° OpenRouter Cache Test",
        border_style="red"
    ))
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenRouter API
    os.environ["ROUTER_BASE_URL"] = "https://openrouter.ai/api/v1"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("ROUTER_API_KEY")
    if not api_key or not api_key.startswith("sk-or-"):
        console.print("[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –¥–µ–π—Å—Ç–≤—É—é—â–∏–π OpenRouter API –∫–ª—é—á![/]")
        console.print("[yellow]–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ROUTER_API_KEY –≤ .env –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk-or-'[/]")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º OpenRouter URL
        config = OpenRouterConfig.from_env()
        config.base_url = "https://openrouter.ai/api/v1"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        
        console.print(f"\n[green]‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º API:[/] {config.base_url}")
        console.print(f"[green]‚úì API Key:[/] {api_key[:10]}...{api_key[-4:]}")
        
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/]")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        import httpx
        http_client = httpx.Client(timeout=config.timeout)
    except ImportError:
        http_client = None
    
    cache_module = PromptCachingTestModule(config, http_client)
    
    # –ú–æ–¥–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–æ–≥–ª–∞—Å–Ω–æ OpenRouter docs)
    models_with_cache_support = [
        "anthropic/claude-3-haiku",
        "anthropic/claude-3-sonnet", 
        "anthropic/claude-3-opus",
        "anthropic/claude-3-5-sonnet",
        "openai/gpt-4o",
        "openai/gpt-4o-mini"
    ]
    
    console.print(f"\n[bold]–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:[/]")
    for model in models_with_cache_support:
        console.print(f"  ‚Ä¢ {model}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ç–æ–∫–µ–Ω–∞–º–∏...")
    
    results = {}
    
    for model in models_with_cache_support:
        console.rule(f"[bold cyan]üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model}[/]")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        console.print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            support_result = cache_module.run_test("cache_support_check", model)
            
            if support_result.is_success():
                support_status = support_result.data.get("support_status", "UNKNOWN")
                indicators = support_result.data.get("support_indicators", [])
                
                if support_status == "SUPPORTED":
                    console.print("[green]‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è![/]")
                    for indicator in indicators:
                        console.print(f"  üíæ {indicator}")
                else:
                    console.print("[yellow]‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞[/]")
                    
            else:
                console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {support_result.error}[/]")
                continue
                
        except Exception as e:
            console.print(f"[red]‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}[/]")
            continue
        
        # –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        console.print("2Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        try:
            cache_result = cache_module.run_test("cache_basic_test", model)
            
            if cache_result.is_success():
                console.print("[green]‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ[/]")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if "cache_comparison" in cache_result.data:
                    comparison = cache_result.data["cache_comparison"]
                    if comparison.get("cache_info_found"):
                        console.print("  üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ!")
                        
                        usage_diffs = comparison.get("usage_differences", [])
                        for diff in usage_diffs:
                            attempt = diff.get("attempt", "?")
                            cache_creation = diff.get("cache_creation_tokens", 0)
                            cache_read = diff.get("cache_read_tokens", 0)
                            
                            console.print(f"    –ü–æ–ø—ã—Ç–∫–∞ {attempt}: —Å–æ–∑–¥–∞–Ω–∏–µ={cache_creation}, —á—Ç–µ–Ω–∏–µ={cache_read}")
                    else:
                        console.print("  ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö")
                        
            else:
                console.print(f"[red]‚ùå –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {cache_result.error}[/]")
                
        except Exception as e:
            console.print(f"[red]‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ: {e}[/]")
        
        results[model] = {
            "support_check": support_result.data if support_result.is_success() else {"error": support_result.error},
            "basic_test": cache_result.data if 'cache_result' in locals() and cache_result.is_success() else {"error": "Test failed"}
        }
        
        console.print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    
    # –ò—Ç–æ–≥–∏
    console.rule("[bold green]üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è[/]")
    
    supported_models = []
    unsupported_models = []
    
    for model, result in results.items():
        support_status = result.get("support_check", {}).get("support_status", "UNKNOWN")
        if support_status == "SUPPORTED":
            supported_models.append(model)
        else:
            unsupported_models.append(model)
    
    console.print(f"[green]‚úÖ –ú–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ({len(supported_models)}):[/]")
    for model in supported_models:
        console.print(f"  ‚Ä¢ {model}")
    
    if unsupported_models:
        console.print(f"\n[yellow]‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ({len(unsupported_models)}):[/]")
        for model in unsupported_models:
            console.print(f"  ‚Ä¢ {model}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ª–æ–≥–∞–º
    if hasattr(cache_module, 'cache_log_file'):
        console.print(f"\n[blue]üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏:[/] {cache_module.cache_log_file}")
        console.print("[dim]–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ analyze_cache.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤[/]")


if __name__ == "__main__":
    main()
