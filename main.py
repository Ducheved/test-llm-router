#!/usr/bin/env python3
"""
OpenRouter API Test Suite v2.0
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π OpenRouter API

–ê–≤—Ç–æ—Ä: Senior Developer with 10+ years experience
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è, —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è, —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ—Å—Ç—ã:
- Chat Completions API (/api/v1/chat/completions)
- Harmony Format –¥–ª—è reasoning –º–æ–¥–µ–ª–µ–π (gpt-oss)
- OpenRouter-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ endpoints (/api/v1/generation, /api/v1/models)
- Image Generation (–ø—Ä—è–º–æ–π API –∏ —á–µ—Ä–µ–∑ chat)
- Vision/Multimodal –∞–Ω–∞–ª–∏–∑
- Tool Calling
- Streaming
- JSON Mode
"""

import os
import sys
import argparse
from pathlib import Path
from dotenv import load_dotenv
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.config import OpenRouterConfig
from src.runner import OpenRouterTestRunner
from rich.console import Console

console = Console()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    load_dotenv()
    
    parser = argparse.ArgumentParser(
        description="OpenRouter API Test Suite v2.0 - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --models openai/gpt-4o openai/gpt-oss-120b
  python main.py --categories chat harmony imagegen
  python main.py --models anthropic/claude-3-haiku --categories vision tools
  
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
  chat        - –ë–∞–∑–æ–≤—ã–µ chat completions
  stream      - Streaming responses
  vision      - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (multimodal)
  json        - JSON mode
  harmony     - Harmony format –¥–ª—è reasoning (gpt-oss)
  tools       - Function/Tool calling
  imagegen    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  generation  - OpenRouter generation stats API
  completions - Completions API (–Ω–µ chat)
  models      - Models list –∏ endpoints
  batch       - Batch –∑–∞–ø—Ä–æ—Å—ã
  cache       - Prompt caching —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  ROUTER_API_KEY     - API –∫–ª—é—á OpenRouter (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  ROUTER_BASE_URL    - Base URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://openrouter.ai)
  TEST_MODELS        - –ú–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  TEST_CATEGORIES    - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  VISION_IMAGE       - –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è vision —Ç–µ—Å—Ç–æ–≤
        """
    )
    
    parser.add_argument(
        "--models", 
        nargs="+", 
        help="–ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: openai/gpt-4o anthropic/claude-3-haiku)"
    )
    parser.add_argument(
        "--categories", 
        nargs="+", 
        help="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: chat harmony imagegen)"
    )
    parser.add_argument(
        "--api-key", 
        help="API –∫–ª—é—á OpenRouter (–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ROUTER_API_KEY)"
    )
    parser.add_argument(
        "--base-url", 
        help="Base URL –¥–ª—è API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://openrouter.ai)"
    )
    parser.add_argument(
        "--output-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: out)"
    )
    parser.add_argument(
        "--verbose", 
        action="store_true", 
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--version", 
        action="version",
        version="OpenRouter Test Suite v2.0"
    )
    
    args = parser.parse_args()
    
    try:
        config = create_config_from_args(args)
        show_startup_info(config, args)
        runner = OpenRouterTestRunner(config)
        
        try:
            results = runner.run_full_test_suite(config.test_models, config.test_categories)
            total_success = sum(suite.success_count for suite in results.values())
            total_tests = sum(len(suite.results) for suite in results.values())
            
            if total_tests == 0:
                console.print("[yellow]‚ö†Ô∏è –ù–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞[/]")
                sys.exit(2)
            elif total_success == 0:
                console.print("[red]‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å[/]") 
                sys.exit(1)
            else:
                success_rate = total_success / total_tests * 100
                if success_rate >= 80:
                    console.print(f"[green]‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({success_rate:.1f}% —É—Å–ø–µ—Ö–∞)[/]")
                else:
                    console.print(f"[yellow]‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ ({success_rate:.1f}% —É—Å–ø–µ—Ö–∞)[/]")
                    sys.exit(0)  # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        
        except KeyboardInterrupt:
            console.print("\n[yellow]‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/]")
            sys.exit(130)
        
        finally:
            runner.cleanup()
    
    except ValueError as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/]")
        if args.verbose:
            import traceback
            console.print(f"[dim]{traceback.format_exc()}[/]")
        sys.exit(1)


def create_config_from_args(args) -> OpenRouterConfig:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    api_key = args.api_key or os.getenv("ROUTER_API_KEY")
    if not api_key:
        raise ValueError(
            "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ROUTER_API_KEY "
            "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --api-key"
        )
    base_url = args.base_url or os.getenv("ROUTER_BASE_URL", "https://openrouter.ai")
    models = []
    if args.models:
        models = args.models
    elif os.getenv("TEST_MODELS"):
        models = [m.strip() for m in os.getenv("TEST_MODELS").split(",") if m.strip()]
    else:
        models = [
            "openai/gpt-4o",           # Multimodal, tools
            "openai/gpt-oss-120b",     # Harmony format, reasoning
            "anthropic/claude-3-haiku", # Fast, reliable
            "google/gemini-pro"        # Alternative provider
        ]
    categories = set()
    if args.categories:
        categories = set(args.categories)
    elif os.getenv("TEST_CATEGORIES"):
        categories = {c.strip() for c in os.getenv("TEST_CATEGORIES").split(",") if c.strip()}
    else:
        categories = {
            "chat", "stream", "vision", "json", 
            "harmony", "tools", "generation", "models"
        }
    config = OpenRouterConfig(
        api_key=api_key,
        base_url=base_url,
        test_models=models,
        test_categories=categories
    )
    if args.output_dir:
        config.output_dir = Path(args.output_dir)
        config.output_dir.mkdir(exist_ok=True)
    
    return config


def show_startup_info(config: OpenRouterConfig, args):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ"""
    from rich.panel import Panel
    
    console.print(Panel.fit(
        f"[bold cyan]üöÄ OpenRouter Test Suite v2.0[/]\n\n"
        f"[green]–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:[/] –ú–æ–¥—É–ª—å–Ω–∞—è, —Ä–∞—Å—à–∏—Ä—è–µ–º–∞—è\n"
        f"[blue]Endpoint:[/] {config.base_url}\n"
        f"[yellow]–ú–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:[/] {len(config.test_models)}\n"
        f"[magenta]–ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤:[/] {len(config.test_categories)}\n\n"
        f"[dim]–ú–æ–¥–µ–ª–∏:[/] {', '.join(config.test_models[:3])}{'...' if len(config.test_models) > 3 else ''}\n"
        f"[dim]–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:[/] {', '.join(sorted(config.test_categories))}",
        title="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        border_style="cyan"
    ))
    
    if args.verbose:
        console.print("[dim]–ó–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞[/]")


if __name__ == "__main__":
    main()

